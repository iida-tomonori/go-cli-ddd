// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/spf13/cobra"
	"github.com/yuru-sha/go-cli-ddd/internal/application/usecase"
	"github.com/yuru-sha/go-cli-ddd/internal/infrastructure/api"
	"github.com/yuru-sha/go-cli-ddd/internal/infrastructure/config"
	"github.com/yuru-sha/go-cli-ddd/internal/infrastructure/http"
	"github.com/yuru-sha/go-cli-ddd/internal/infrastructure/persistence"
	"github.com/yuru-sha/go-cli-ddd/internal/interfaces/cli"
)

// Injectors from wire.go:

// InitializeApp はアプリケーションを初期化します
func InitializeApp(params AppParams) (*cobra.Command, error) {
	rootCommand := cli.NewRootCommand()
	configOptions := ProvideConfigOptions(params)
	configConfig, err := config.LoadConfig(configOptions)
	if err != nil {
		return nil, err
	}
	databaseConfig := ProvideDatabaseConfig(configConfig)
	db, err := persistence.NewDatabase(databaseConfig)
	if err != nil {
		return nil, err
	}
	accountRepository := persistence.NewAccountRepository(db)
	apiConfig := ProvideAPIConfig(configConfig)
	httpConfig := ProvideHTTPConfig(configConfig)
	client := http.NewHTTPClient(httpConfig)
	accountAPIRepository := api.NewAccountAPIRepository(apiConfig, client)
	accountUseCase := usecase.NewAccountUseCase(accountRepository, accountAPIRepository)
	accountCommand := cli.NewAccountCommand(accountUseCase)
	campaignRepository := persistence.NewCampaignRepository(db)
	campaignAPIRepository := api.NewCampaignAPIRepository(apiConfig, client)
	campaignUseCase := usecase.NewCampaignUseCase(campaignRepository, campaignAPIRepository, accountRepository)
	campaignCommand := cli.NewCampaignCommand(campaignUseCase)
	masterUseCase := usecase.NewMasterUseCase(accountUseCase, campaignUseCase)
	masterCommand := cli.NewMasterCommand(masterUseCase)
	command, err := ProvideRootCommand(rootCommand, accountCommand, campaignCommand, masterCommand)
	if err != nil {
		return nil, err
	}
	return command, nil
}

// wire.go:

// AppParams はアプリケーションのパラメータを表します
type AppParams struct {
	ConfigPath string
	Env        string
}

// ProvideConfigOptions は設定オプションを提供します
func ProvideConfigOptions(params AppParams) *config.ConfigOptions {
	return config.NewConfigOptions(params.ConfigPath, params.Env)
}

// ProvideDatabaseConfig はデータベース設定を提供します
func ProvideDatabaseConfig(cfg *config.Config) *config.DatabaseConfig {
	return &cfg.Database
}

// ProvideHTTPConfig はHTTP設定を提供します
func ProvideHTTPConfig(cfg *config.Config) *config.HTTPConfig {
	return &cfg.HTTP
}

// ProvideAPIConfig はAPI設定を提供します
func ProvideAPIConfig(cfg *config.Config) *config.APIConfig {
	return &cfg.API
}

// ProvideRootCommand はルートコマンドを提供します
func ProvideRootCommand(
	rootCmd *cli.RootCommand,
	accountCmd *cli.AccountCommand,
	campaignCmd *cli.CampaignCommand,
	masterCmd *cli.MasterCommand,
) (*cobra.Command, error) {
	rootCmd.Cmd.AddCommand(accountCmd.Cmd)
	rootCmd.Cmd.AddCommand(campaignCmd.Cmd)
	rootCmd.Cmd.AddCommand(masterCmd.Cmd)
	return rootCmd.Cmd, nil
}
