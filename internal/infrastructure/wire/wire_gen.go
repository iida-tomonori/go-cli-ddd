// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/spf13/cobra"
	"github.com/yuru-sha/go-cli-ddd/internal/application/usecase"
	"github.com/yuru-sha/go-cli-ddd/internal/infrastructure/api/externalapi1"
	"github.com/yuru-sha/go-cli-ddd/internal/infrastructure/config"
	"github.com/yuru-sha/go-cli-ddd/internal/infrastructure/http"
	"github.com/yuru-sha/go-cli-ddd/internal/infrastructure/notification"
	"github.com/yuru-sha/go-cli-ddd/internal/infrastructure/persistence/mysql"
	"github.com/yuru-sha/go-cli-ddd/internal/infrastructure/secrets"
	"github.com/yuru-sha/go-cli-ddd/internal/interfaces/cli"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeApp はアプリケーションを初期化します
func InitializeApp(params AppParams) (*cobra.Command, error) {
	rootCommand := cli.NewRootCommand()
	options := ProvideConfigOptions(params)
	configConfig, err := config.LoadConfig(options)
	if err != nil {
		return nil, err
	}
	database, err := mysql.NewDatabase(configConfig)
	if err != nil {
		return nil, err
	}
	db := ProvideDatabaseConnection(database)
	mySQLAccountRepository := mysql.NewAccountRepository(db)
	httpConfig := ProvideHTTPConfig(configConfig)
	client := http.NewHTTPClient(httpConfig)
	awsSecretsManager, err := secrets.NewAWSSecretsManager(configConfig)
	if err != nil {
		return nil, err
	}
	manager := ProvideSecretsManager(awsSecretsManager)
	externalAPI1AccountRepository := externalapi1.NewAccountRepository(configConfig, client, manager)
	notificationRepository := notification.NewRepository(configConfig)
	accountUseCase := usecase.NewAccountUseCase(mySQLAccountRepository, externalAPI1AccountRepository, notificationRepository)
	accountCommand := cli.NewAccountCommand(accountUseCase)
	mySQLCampaignRepository := mysql.NewCampaignRepository(db)
	externalAPI1CampaignRepository := externalapi1.NewCampaignRepository(configConfig, client, manager)
	campaignUseCase := usecase.NewCampaignUseCase(mySQLCampaignRepository, externalAPI1CampaignRepository, mySQLAccountRepository)
	campaignCommand := cli.NewCampaignCommand(campaignUseCase)
	masterUseCase := usecase.NewMasterUseCase(accountUseCase, campaignUseCase)
	masterCommand := cli.NewMasterCommand(masterUseCase)
	command, err := ProvideRootCommand(rootCommand, accountCommand, campaignCommand, masterCommand)
	if err != nil {
		return nil, err
	}
	return command, nil
}

// wire.go:

// AppParams はアプリケーションのパラメータを表します
type AppParams struct {
	ConfigPath string
	Env        string
}

// ProvideConfigOptions は設定オプションを提供します
func ProvideConfigOptions(params AppParams) *config.Options {
	return config.NewConfigOptions(params.ConfigPath, params.Env)
}

// ProvideDatabaseConfig はデータベース設定を提供します
func ProvideDatabaseConfig(cfg *config.Config) *config.DatabaseConfig {
	return &cfg.Database
}

// ProvideHTTPConfig はHTTP設定を提供します
func ProvideHTTPConfig(cfg *config.Config) *config.HTTPConfig {
	return &cfg.HTTP
}

// ProvideAWSConfig はAWS設定を提供します
func ProvideAWSConfig(cfg *config.Config) *config.AWSConfig {
	return &cfg.AWS
}

// ProvideSecretsManager はSecretsManagerインターフェースを提供します
func ProvideSecretsManager(sm *secrets.AWSSecretsManager) secrets.Manager {
	return sm
}

// ProvideDatabaseConnection はデータベース接続を提供します
func ProvideDatabaseConnection(db *mysql.Database) *gorm.DB {
	return db.DB
}

// ProvideRootCommand はルートコマンドを提供します
func ProvideRootCommand(
	rootCmd *cli.RootCommand,
	accountCmd *cli.AccountCommand,
	campaignCmd *cli.CampaignCommand,
	masterCmd *cli.MasterCommand,
) (*cobra.Command, error) {
	rootCmd.Cmd.AddCommand(accountCmd.Cmd)
	rootCmd.Cmd.AddCommand(campaignCmd.Cmd)
	rootCmd.Cmd.AddCommand(masterCmd.Cmd)
	return rootCmd.Cmd, nil
}
